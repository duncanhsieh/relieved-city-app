{"version":3,"sources":["components/welcome.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","App","useragent","navigator","userAgent","regex","RegExp","join","state","standalone","window","matchMedia","matches","hasOwnProperty","ios","test","android","chrome","indexOf","safari","webview","console","log","this","audio","className","exact","path","ref","element","src","type","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mRAQeA,MANf,WACE,OACE,sCCkDWC,E,kDAtCb,aAAe,IAAD,sBACZ,eAEA,IAAIC,EAAYC,UAAUC,UAEtBC,EAAQ,IAAIC,OAAJ,WADA,CAAC,UAAU,kCAAmC,wBACzBC,KAAK,KAA1B,KAAmC,MALnC,OAOZ,EAAKC,MAAQ,CACXC,WAAYC,OAAOC,WAAW,8BAA8BC,SAAWT,UAAUU,eAAe,cAChGC,IAAM,IAAIR,OAAO,sBAAuBS,KAAKb,GAC7Cc,QAAU,IAAIV,OAAO,WAAYS,KAAKb,GACtCe,QAAqD,IAA5Cd,UAAUC,UAAUc,QAAQ,WACrCC,QAAqD,IAA5ChB,UAAUC,UAAUc,QAAQ,aAAiE,IAA5Cf,UAAUC,UAAUc,QAAQ,WACtFE,QAASf,EAAMU,KAAKb,IAGtBmB,QAAQC,IAAI,EAAKd,OAhBL,E,gEAHZa,QAAQC,IAAIC,KAAKC,W,8CAsBT,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cAAZ,UAIF,2BAAOC,IAAK,SAACC,GAAc,EAAKL,MAAQK,IACtC,4BAAQC,IAAI,iBAAiBC,KAAK,oB,GArC1BC,IAAMC,WCElBC,EAAcC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAOC,GAC9BtC,UAAUuC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WAC/B5B,QAAQC,IAAIyB,EAAiBvC,OACE,cAA3BuC,EAAiBvC,QACfL,UAAUuC,cAAcQ,YAI1B7B,QAAQC,IACN,iHAKEmB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBxB,QAAQC,IAAI,sCAGRmB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDSnB,SAAkBlB,GACvB,GAA6C,kBAAmBtC,UAAW,CAGzE,GADkB,IAAIyD,IAAIC,qBAAwBnD,OAAO0B,SAAS0B,MACpDC,SAAWrD,OAAO0B,SAAS2B,OAIvC,OAGFrD,OAAOsD,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,qBAAN,sBAEP3B,IAkEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYlD,QAAQ,cAG5Cf,UAAUuC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BlC,OAAO0B,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLhC,QAAQC,IACN,oEAzFAoD,CAAwBlC,EAAOC,GAI/BtC,UAAUuC,cAAc6B,MAAM3B,MAAK,WACjCvB,QAAQC,IACN,kHAMJD,QAAQC,IAAI,kDACZiB,EAAgBC,EAAOC,QChC/BC,K","file":"static/js/main.655a811a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Welcome() {\n  return (\n    <div>test</div>\n  )\n}\n\nexport default Welcome;","import React from 'react';\nimport './App.css';\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport Welcome from './components/welcome';\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    console.log(this.audio);\n  }\n\n  constructor() {\n    super();\n\n    let useragent = navigator.userAgent;\n    let rules = ['WebView','(iPhone|iPod|iPad)(?!.*Safari\\/)','Android.*(wv|\\.0\\.0\\.0)'];\n    let regex = new RegExp(`(${rules.join('|')})`, 'ig');\n\n    this.state = {\n      standalone: window.matchMedia('(display-mode: standalone)').matches || navigator.hasOwnProperty('standalone'),\n      ios: (new RegExp('(iPhone|iPod|iPad)')).test(useragent),\n      android: (new RegExp('Android')).test(useragent),\n      chrome: (navigator.userAgent.indexOf(\"Chrome/\") !== -1),\n      safari: (navigator.userAgent.indexOf(\"Safari/\") !== -1 && navigator.userAgent.indexOf(\"Chrome/\") === -1),\n      webview: regex.test(useragent)\n    };\n\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Welcome />\n          </Route>\n          <Route path=\"/scene/:id\">\n            TESTC\n          </Route>\n        </Switch>\n        <audio ref={(element) => { this.audio = element; }}>\n          <source src=\"media/test.m4a\" type=\"audio/ogg\"></source>\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        console.log('Is not localhost. Just register service worker');\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          console.log(installingWorker.state);\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}